{"token":"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiaG9sYW5kb3NlZ3Vyb3MiLCJuYW1lIjoiTGlsaWFuYSBTaWx2YSIsImFwaSI6dHJ1ZSwiaWQiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIiwiZXhwIjoxODcxNTc4Nzg1LCJqdGkiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIn0.BCNWvf9uqejdRxjBI9-AlqLDUYGIXBGDx8kutmFsDLKHfayox1V2B3noK02j0OSCK3cij1_51e35MNU8kJSisA","cas":[{"publishedCode":"const LOGIN_URL = 'rws/holandonet/login';\r\n\r\nconst utils = require('utils');\r\nconst main = async () => {\r\n  utils.initData();\r\n  user.set('JWToken' , null);\r\n  user.set('IdSession' , null);\r\n\r\n\r\n  utils.resetData(); \r\n\r\n  return await utils.login();\r\n};\r\n\r\nmain()\r\n  .then ( (x) => {} )\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"login","type":"USER","id":"YRIGN55L0RYS06MWR435","filename":"login.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  await utils.loginAuxiliar('general');\n};\n\nmain()\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_general","type":"USER","id":"KTZ1UKIW20KKCSUL6AWC","filename":"login_general.js"},{"publishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nconst utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n  \r\n  await utils.loginListas();\r\n\r\n  // Por el momento, la lista de secciones es la misma para todo\r\n  // el mundo, pero en un futuro cercano, eso pueded cambiar x productor\r\n\r\n  // await utils.listSecciones();\r\n\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession')\r\n  };\r\n\r\n\r\n  await utils.getRESTData({\r\n    uri: DATOS_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n\r\n    ok: ((resp) => {\r\n      let usr = resp.p_list_user[0];\r\n      user.set('CodProductor', usr.cod_prod);\r\n      user.set('nombre', usr.nombre_user);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('CodProductor', null);\r\n      user.set('nombre', null);\r\n      throw new Error(error);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","unPublishedCode":null,"name":"list_datos_user","type":"USER","id":"10HXUTGXJ30JFIS4HGWL","filename":"list_datos_user.js"},{"publishedCode":"const CONTACTOS_URL = 'rws/listas/LIST_MEDIOS_PAGO';\nlet utils = require('utils');\n\ngetPayData = async () => {\n\n  user.set('error', null);\n  \n  data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_producto\": null\n  };\n\n  var retVal = [];\n  await utils.getRESTData({\n    uri: CONTACTOS_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n\n    ok: ((resp) => {\n      resp.p_list_medios_pago.forEach(element => {\n        retVal.push(element.descri);\n      });\n    }),\n    error: ((error) => {\n      return [\n        'Hubo un error al traer la lista de medios de pago',\n        'Por favor, reintalo mas tarde'\n      ];\n    }),\n  });\n  return retVal;\n\n}\n\nconst main = async () => {\n\n var finalData =  await getPayData();\n\n  user.set('payDataList',finalData.join('\\n'));\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n    usr.set('error', null);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_medios_pago","type":"USER","id":"XUDXHL5UA3SRKHOFQSIU","filename":"list_medios_pago.js"},{"publishedCode":"const POLIZAS_CARTERA_URL = 'rws/listados/LIST_POLIZA_CARTERA';\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  await utils.loginAuxiliar('listados');\r\n\r\n\r\n  let data =\r\n  {\r\n    \"p_cod_asegu\": null,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_cod_sec\": \"3\", //3 -> automotores\r\n    \"p_cod_subramo\": null,\r\n    \"p_endoso\": null,\r\n    \"p_estado\": null,\r\n    \"p_limite\": 1000,\r\n    \"p_medio_pago\": null,\r\n    \"p_nropag\": 0,\r\n    \"p_regxpag\": 25,\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_patente\" : \"AB130KH\",\r\n    \"p_poliza\": null,\r\n    \"p_tiene_siniestro\": null,\r\n    \"p_regxpag\": 25,\r\n    \"p_tiene_siniestro\": null\r\n  }\r\n\r\n\r\n  return await utils.getRESTData({\r\n    uri: POLIZAS_CARTERA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListados'),\r\n\r\n    ok: ((resp) => {\r\n      user.set('Polizas', JSON.stringify(resp.p_list_poliza_cartera));\r\n      bmconsole.log('ok');\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.log('error');\r\n      user.set('Polizas', null);\r\n    }),\r\n  });\r\n\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"list_poliza_cartera","type":"USER","id":"WKBIUXYCX5IOUS8DJVGL","filename":"list_poliza_cartera.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"datos_contacto","type":"USER","id":"AAEY3YF56UF0E7LZO83W","filename":"datos_contacto.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  return await utils.loginAuxiliar('listados');\n};\n\nmain()\n  .then ( (x) => {} )\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_listados","type":"USER","id":"ZFMAX76R5RN0ESNO05XT","filename":"login_listados.js"},{"publishedCode":"  resetData : () => {\r\n    user.set('error' , null);\r\n    user.set('JWTokenListas' , null);\r\n    user.set('JWTokenPoliza' , null);\r\n    user.set('IdSessionListas' , null);\r\n    user.set('IdSessionPoliza' , null);\r\n    user.set('IdSessionListados' , null);\r\n    user.set('JWTokenListados' , null);\r\n    user.set('IdSessionGeneral' , null);\r\n    user.set('JWTokenGeneral' , null);\r\n    user.set('CodProductor' , null);\r\n    user.set('nombre' , null);\r\n    user.set('Polizas' , null);\r\n    user.set('Asegurados' , null);\r\n    user.set('Asegurado' , null);\r\n    user.set('cantidadDePolizas' , null);\r\n    user.set('cantidadDeAsegurados' , null);\r\n    user.set('listadoPolizas' , null);    \r\n  },\r\n  listSecciones: async() => {\r\n    const DATOS_URL_SECCIONES = 'rws/listas/LIST_TIPOS_SECCIONES';\r\n\r\n    user.set('error', null);\r\n  \r\n    await utils.loginListas();\r\n  \r\n    let data =\r\n    {\r\n      \"p_o_sesion\": user.get('IdSession')\r\n    };\r\n  \r\n  \r\n    await utils.getRESTData({\r\n      uri: DATOS_URL_SECCIONES,\r\n      data: data,\r\n      token: user.get('JWTokenListas'),\r\n  \r\n      ok: ((resp) => {\r\n        let secciones = [];\r\n        let i = 0;\r\n        resp.p_list_tipos_secciones.forEach( (el) => {\r\n          secciones.push({\r\n            id : el.value,\r\n            name: el.label.split(' ').pop(),\r\n          });\r\n        });\r\n        user.set('listaSecciones',JSON.stringify(secciones));\r\n\r\n        ;\r\n      }),\r\n      error: ((error) => {\r\n        throw new Error(error);\r\n      }),\r\n    }); \r\n  },\r\n  getListaSeccionesLocal:  () =>{\r\n    return  [\r\n      { id: 3, name:  'Automotores' },\r\n      { id: 2, name:  'Hogar' },\r\n      { id: 2, name:  'Comercio' },\r\n      { id: 2, name:  'Consorcio' },\r\n      { id: 1, name:  'Incendio' },\r\n      { id: 10, name:  'Acc. Personales' },\r\n      { id: 21, name:  'Plenus' },\r\n      { id: 14, name:  'Aeronaves' },\r\n      { id: 18, name:  'Cascos' },\r\n    ];\r\n    /*\r\n      { id: 1, name:  'Incendios' },\r\n      { id: 2, name:  'Combinados' },\r\n      { id: 3, name:  'Autos y motos' },\r\n      { id: 4, name:  'Acc. del Trabajo' },\r\n      { id: 5, name:  'Cristales' },\r\n      { id: 6, name:  'Riesgos del Trabajo' },\r\n      { id: 7, name:  'Granizo' },\r\n      { id: 8, name:  'Responsab. Civil' },\r\n      { id: 9, name:  'Robo' },\r\n      { id: 10, name:  'Acc. Personales' },\r\n      { id: 11, name:  'CauciÃ³n' },\r\n      { id: 12, name:  'Ganado' },\r\n      { id: 13, name:  'Motovehiculos' },\r\n      { id: 14, name:  'Aeronaves' },\r\n      { id: 15, name:  'Riesgos Varios' },\r\n      { id: 16, name:  'Seguro Tecnico' },\r\n      { id: 17, name:  'Inter. de la Explot.' },\r\n      { id: 18, name:  'Cascos' },\r\n      { id: 19, name:  'Transportes' },\r\n      { id: 20, name:  'P. & I.' },\r\n      { id: 21, name:  'Acc. Pers. PLENUS' },\r\n      { id: 22, name:  'Saldo Deudor' },\r\n      { id: 23, name:  'Vida Colectivos' },\r\n      { id: 24, name:  'Vida Individual' },\r\n      { id: 25, name:  'Vida Obligatorio' },\r\n      { id: 26, name:  'Vida Col. Abierto' },\r\n      { id: 27, name:  'Sepelio' }      \r\n       */\r\n\r\n  },\r\n  initData : () => {\r\n    let secciones = utils.getListaSeccionesLocal();\r\n    user.set('listaSecciones',JSON.stringify(secciones));\r\n  },\r\n  getBaseURL: () => {\r\n\r\n    //return 'https://nthnet.laholando.com/';\r\n    return 'https://hnet.laholando.com/';\r\n  },\r\n  getSeccionByLabel: (label) =>{\r\n    let secciones = utils.getListaSeccionesLocal();\r\n    let found = secciones.find( (l) => l.name == label );\r\n    if (found) \r\n        return found.id;\r\n    return 0; // TODO OJO!!!\r\n  },\r\n  getUniquePolizas: (polizas) => {\r\n    try {\r\n      //result.text(polizas.length);\r\n      //result.text(JSON.stringify(polizas));\r\n      let i = 0;\r\n      let retVal = [];\r\n      try {\r\n        polizas.forEach(p => {\r\n          retVal.push({\r\n            id: i++,\r\n            fecha: moment(p.fec_vig,'DD/MM/YYYY'),\r\n            poliza: p.poliza,\r\n            endoso: p.endoso,\r\n            cod_asegu: p.cod_asegu,\r\n          });      \r\n        });\r\n          \r\n      } catch (error) {\r\n        result.text(error)        ;\r\n      }\r\n\r\n      /*var retVal = polizas.reduce((acc, d, index) => {\r\n        \r\n        const found = false;//acc.find(a => (a.name == d.poliza  && a.endoso == d.endoso) );\r\n        if (!found) {\r\n        }\r\n        return acc;\r\n      }, []);\r\n  */\r\n      retVal = retVal.sort( (a,b) => {\r\n        if ( a.poliza < b.poliza )\r\n          return -1;\r\n        if ( a.poliza > b.poliza )\r\n          return +1;\r\n\r\n        if ( a.endoso == '0' )\r\n          return -1;\r\n        if ( b.endoso == '0' )\r\n          return +1;\r\n\r\n        if ( a.fecha < b.fecha )\r\n          return +1;\r\n        if ( a.fecha > b.fecha )\r\n          return -1;\r\n\r\n        return 0;\r\n      });\r\n      retVal = retVal.map( (v) => {\r\n        return {\r\n          cod_sec: polizas[v.id].cod_sec,\r\n          poliza: polizas[v.id].poliza,\r\n          endoso: polizas[v.id].endoso,\r\n          p_x_idriesgo: polizas[v.id].p_x_idriesgo,\r\n          tipo_emi: polizas[v.id].tipo_emi,\r\n          solicitud: polizas[v.id].solicitud,\r\n          tipo_emision: polizas[v.id].tipo_emision,\r\n          fec_vig: polizas[v.id].fec_vig,\r\n          forma_pago: polizas[v.id].forma_pago,\r\n          cod_asegu: polizas[v.id].cod_asegu,\r\n        };\r\n        //return polizas[v.id];\r\n      });\r\n      return retVal;      \r\n    } catch (error) {\r\n      bmconsole.error(`Error en la getUniquePolizas -> ${error}`);\r\n      result.text(JSON.stringify(error));\r\n      return [];\r\n    }\r\n\r\n  },\r\n  checkRESTError : (resp) => {\r\n\r\n    try {\r\n      if (_.has(resp, 'payload') && _.has(resp.payload, 'p_error'))\r\n        return resp.payload.p_error;\r\n      if (_.has(resp, 'p_error') && resp.p_error != 0)\r\n        return resp.p_error;\r\n\r\n    } catch (error) {\r\n      bmconsole.log(error);\r\n    }\r\n    return null;\r\n  },\r\n\r\ngetRESTData : async (cfg) => {\r\n\r\n  let url = utils.getBaseURL() + cfg.uri;\r\n\r\n  var headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n\r\n  if (cfg.token) {\r\n    headers['X-authorization'] = 'Bearer ' + cfg.token;\r\n  }\r\n\r\n  return rp({\r\n    uri: url,\r\n    method: 'POST',\r\n    body: cfg.data,\r\n    json: true,\r\n    headers: headers\r\n  })\r\n    .then((resp) => {\r\n      let error = utils.checkRESTError(resp);\r\n      if (error)\r\n        throw new Error(error);\r\n      if (cfg.ok)\r\n        cfg.ok(resp);\r\n    })\r\n    .catch((error) => {\r\n      bmconsole.error(`[ERROR] : ${error.message}`);\r\n\r\n      user.set('error', error);\r\n      if (cfg.error)\r\n        cfg.error(error);\r\n    })\r\n    .finally(() => {\r\n      //result.done();\r\n    });\r\n},\r\nisInvalidJWT: (token) => {\r\n  try {\r\n    let parsedJWT = _.split(token, '.');\r\n    // En el 2do estÃ¡ la expiraciÃ³n\r\n    let data = Buffer.from(parsedJWT[1], 'base64').toString();\r\n    let jwtData = JSON.parse(data);\r\n    return _.now() > jwtData['exp'] * 1000;\r\n\r\n  } catch (error) {\r\n    if (token) {\r\n      bmconsole.log('-=[Error en la isInvalidJWT]=-')\r\n      bmconsole.log(error);\r\n    }\r\n  }\r\n  return true;\r\n},\r\nlogin: async () => {\r\n  // El login principal\r\n  if ( user.get('codUsuario') == \"\" ) {\r\n    // No hay usuario y password -> voy a la acciÃ³nde cÃ³digo que los pide\r\n    result.gotoRule('Inicio de sesiÃ³n');\r\n  }\r\n  utils.resetData();\r\n  utils.initData();\r\n\r\n},\r\n\r\nloginAuxiliar: async (sistema) => {\r\n\r\n  // Lo primero, es chequear el login\r\n  await utils.login();\r\n\r\n  // OJO! esto debiera ir a la regla de login, pero por ahora no lo estoy logrando\r\n\r\n  // TODO: Pasar a constantes\r\n  let data =\r\n  {\r\n    \"p_usuario\": \"PRODUSU\",\r\n    \"p_enc_pwd\": \"PRODUSU\"\r\n  };\r\n\r\n  let uri = `rws/${sistema}/login`;\r\n\r\n  sistema = _.startCase(sistema).replaceAll(' ','');\r\n\r\n  return await utils.getRESTData({\r\n    uri: uri,\r\n    data: data,\r\n    token: user.get('JWToken'),\r\n    ok: ((resp) => {\r\n      user.set(`IdSession${sistema}`, resp.payload.p_o_sesion);\r\n      user.set(`JWToken${sistema}`, resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.error(`Login ${sistema} ${error}`)\r\n      user.set(`IdSession${sistema}`, null);\r\n      user.set(`JWToken${sistema}`, null);\r\n      throw error;\r\n    }),\r\n  });\r\n},\r\n\r\n loginListas: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenListas'))) {\r\n    return utils.loginAuxiliar('listas');\r\n  }\r\n},\r\n\r\nloginListados: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenListados')))\r\n    return await utils.loginAuxiliar('listados');\r\n},\r\n\r\nloginGeneral: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenGeneral')))\r\n    return await utils.loginAuxiliar('general');\r\n},\r\n\r\nloginPolizas: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenPoliza')))\r\n    return utils.loginAuxiliar('poliza');\r\n},\r\n\r\nloginDenunciaAsegurado: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenDenunciaAsegurado')))\r\n    return utils.loginAuxiliar('denuncia_asegurado');\r\n},\r\nloginBotonPago: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenBotonPagoApp')))\r\n    return utils.loginAuxiliar('boton_pago_app');\r\n},\r\n\r\nlogin: async() => {\r\n  const LOGIN_URL = 'rws/holandonet/login';\r\n\r\n  let isConnected = false;\r\n  if (utils.isInvalidJWT(user.get('JWToken'))) {\r\n    let pUsuario = user.get(\"codUsuario\");\r\n    let pEncPwd = user.get(\"userPassword\");\r\n    if ( pUsuario && pEncPwd ) {\r\n      // Trato de rehacer el login\r\n      // TODO: Si la sesion no estÃ¡ expirada, hacer el login x ahÃ­\r\n      let data =\r\n      {\r\n        \"p_usuario\": user.get(\"codUsuario\"),\r\n        \"p_enc_pwd\": user.get(\"userPassword\"),\r\n        \"p_cod_t_usuario\": \"P\"\r\n      };\r\n      await utils.getRESTData({\r\n        uri: LOGIN_URL,\r\n        data: data,\r\n        ok: ((resp) => {\r\n          bmconsole.log(`Login OK ${resp.payload.p_o_sesion}`);\r\n          user.set('IdSession', resp.payload.p_o_sesion);\r\n          user.set('JWToken', resp.token);\r\n          isConnected = true;\r\n        }),\r\n        error: ((error) => {\r\n          bmconsole.log(`Error en el login ${error}`);\r\n          user.set('IdSession', null);\r\n          user.set('JWToken', null);\r\n        }),\r\n      });\r\n\r\n      // Si depuÃ©s de todo esto no estÃ¡ conectado, voy a login\r\n    }\r\n  } else {\r\n    isConnected = true;\r\n  }\r\n\r\n  if ( !isConnected ){\r\n    result.text('Hubo un error al hacer la conexiÃ³n');\r\n  }\r\n\r\n},\r\nblobToBase64: async (blob) => {\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(blob);\r\n  return await new Promise(resolve => {\r\n    reader.onloadend = () => {\r\n      resolve(reader.result);\r\n    };\r\n  });\r\n},\r\ngetPolizaCompleta: async (poliza) => {\r\n  let documento = await utils.getURLPolizaCompleta(poliza);\r\n\r\n  let error = utils.checkRESTError(documento);\r\n  if (error)\r\n    throw new Error(error);\r\n\r\n  let outData = null;\r\n\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    redirect: \"follow\"\r\n  };\r\n  \r\n  await fetch(documento.p_url,requestOptions)\r\n    .then((response) => \r\n      response.blob()\r\n     )\r\n    .then( async (blob) => {\r\n      const arrayBuffer = await blob.arrayBuffer()\r\n      outData = Buffer.from(arrayBuffer)\r\n\r\n    })\r\n    .catch((error) => console.error(error));\r\n\r\n  /*\r\n  var headers = {\r\n    'Accept': '* /*',\r\n    'Accept-Encoding': 'gzip,deflate,br',\r\n    \r\n  };\r\n\r\n  await rp({\r\n    uri: documento.p_url,\r\n    method: 'GET',\r\n    //json: true,\r\n    headers: headers\r\n  }).then((resp) => {\r\n    outData = resp;\r\n  }).catch((error) => {\r\n    bmconsole.error(`[ERROR] : ${error.message}`);\r\n\r\n    user.set('error', error);\r\n  });\r\n\r\n  */\r\n  return outData.toString('base64');//Buffer.from(outData).toString('base64');\r\n},\r\ngetURLPolizaCompleta: async(poliza) => {\r\n  await utils.loginListados();\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_poliza\": poliza.poliza,\r\n    \"p_cod_sec\": poliza.cod_sec,\r\n    \"p_endoso\": poliza.endoso,\r\n    \"p_tipo_emi\": poliza.tipo_emi,\r\n    \"p_solicitud\":poliza.solicitud,\r\n    //\"p_nro_rie\": null,\r\n  };\r\n\r\n  let urlPC = null;\r\n\r\n  const POLIZA_COMPLETA_URL = 'rws/listados/URLPOLCARTERA';\r\n\r\n  await utils.getRESTData({\r\n    uri: POLIZA_COMPLETA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListados'),\r\n    ok: ((resp) => {\r\n      urlPC = resp;\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.log(`Hubo un error al traer la pÃ³liza completa: ${error}`)\r\n      return null;\r\n    }),\r\n  });\r\n  return urlPC;\r\n\r\n},\r\nlogEvent : async(data) => {\r\n  const ANALYTICS_MEASUREMENT_ID = 'G-SZG7S4T45N';\r\n  const ANALYTICS_API_SECRET = 'Y9jUmvz2Q3GK5zxI0JEOeg';\r\n  const ANALYTICS_HOST = 'www.google-analytics.com'\r\n  const ANALYTICS_PROTOCOL = 'https'\r\n  const ANALYTICS_URI = `/mp/collect?measurement_id=${ANALYTICS_MEASUREMENT_ID}&api_secret=${ANALYTICS_API_SECRET}`;\r\n\r\n  data.usuario = user.get('codUsuario');\r\n\r\n  const url = `${ANALYTICS_PROTOCOL}://${ANALYTICS_HOST}${ANALYTICS_URI}`\r\n  const TIMESTAMP = moment().valueOf().toString() + '000';\r\n\r\n  let evt_data = {\r\n    client_id: 'f3c51ccd-4fb0-48e8-95f6-ffb5bac39d9e',\r\n    timestamp_micros: TIMESTAMP,\r\n    non_personalized_ads: false,\r\n    events: [{\r\n      name: 'chatbot_pas',\r\n      params: data,\r\n    }],\r\n  };\r\n\r\n  return await rp({\r\n    uri: url,\r\n    method: 'POST',\r\n    body: evt_data,\r\n    json: true,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  }).then((resp) => {\r\n    bmconsole.log(resp);\r\n  }).catch((error) => {\r\n    bmconsole.log(error);\r\n  });\r\n\r\n}","unPublishedCode":null,"name":"utils","type":"USER","id":"JLEJ1NR21T6JN2SWOPPI","filename":"utils.js"},{"publishedCode":"const DOCUMENTO_POLIZA_URL = 'rws/poliza/OBTENER_DOCUMENTO';\r\n\r\nlet utils = require('utils');\r\nlet sendFile = require('send_document');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  let codDocumento = 'EMISION_CATALOGADO_FIRMA';\r\n\r\n  if (context.params.codDocumento != null && (context.params.codDocumento ?? '') != '')\r\n    codDocumento = context.params.codDocumento;\r\n\r\n  let strPolizas = user.get('Polizas');\r\n  let Polizas = JSON.parse(strPolizas);\r\n  let i = 0;\r\n  try {\r\n    let opcionPoliza = JSON.parse(user.get('opcionPoliza'));\r\n    i = opcionPoliza.id;\r\n  } catch (error) {\r\n\r\n  }\r\n\r\n  let Poliza = Polizas[i];\r\n  let fileName = `${codDocumento}-${Poliza.poliza}.pdf`;\r\n\r\n  await utils.logEvent({\r\n    \"function\": \"poliza_obtener_documento\",\r\n    \"tipoFiltro\": user.get('tipoFiltroPoliza'),\r\n    \"tipoDocumento\": codDocumento,\r\n    \"seccion\": Poliza.cod_sec,\r\n    \"poliza\": Poliza.poliza\r\n  });\r\n\r\n\r\n  if (codDocumento == 'EMISION_CATALOGADO_FIRMA') {\r\n    // PÃ³liza completa es un caso especial\r\n    let doc = await utils.getPolizaCompleta(Poliza);\r\n    await sendFile.sendFile(`POLIZA-COMPLETA-${Poliza.poliza}.pdf`, doc);\r\n  } else {\r\n    await utils.loginPolizas();\r\n\r\n    let data =\r\n    {\r\n      \"p_o_sesion\": user.get('IdSessionListados'),\r\n      \"p_cod_documento\": codDocumento,\r\n      \"p_cod_sec\": 0,\r\n      \"p_poliza\": 0,\r\n      \"p_endoso\": 0\r\n    };\r\n\r\n\r\n    data.p_cod_sec = Poliza.cod_sec;\r\n    data.p_poliza = Poliza.poliza;\r\n    data.p_endoso = Poliza.endoso;\r\n    bmconsole.log(JSON.stringify(data));\r\n\r\n    let pDocumento = null;\r\n\r\n    await utils.getRESTData({\r\n      uri: DOCUMENTO_POLIZA_URL,\r\n      data: data,\r\n      token: user.get('JWTokenPoliza'),\r\n      ok: ((resp) => {\r\n        pDocumento = resp.p_documento;\r\n      }),\r\n      error: ((error) => {\r\n        bmconsole.log(`Hubo un error al traer el documento de la pÃ³liza: ${error}`)\r\n        // Agregado el caso de que sea CUPONERA pero con otra forma de pago\r\n        if (codDocumento.toUpperCase() == 'CUPONERA' && Poliza.forma_pago != null && Poliza.forma_pago.toUpperCase() != 'CUPONERA') {\r\n          result.text(`La pÃ³liza ${Poliza.poliza} se encuentra adherida a dÃ©bito automÃ¡tico vÃ­a  ${Poliza.forma_pago}`);\r\n        } else\r\n          result.text(`No existe ese tipo de documento para esa pÃ³liza`);\r\n        user.set('copiaPoliza', null);\r\n        user.set('error', null);\r\n        return null;\r\n      }),\r\n    });\r\n\r\n    if (pDocumento != null) {\r\n      await sendFile.sendFile(fileName, pDocumento);\r\n    }\r\n  }\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n\r\n  .catch(err => {\r\n    bmconsole.error(`[ERROR]: ${err}`);\r\n    //result.text(JSON.parse(user.get('Polizas')));//`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"poliza_obtener_documento","type":"USER","id":"JK3G2Q66BXEVYMUJVS0X","filename":"poliza_obtener_documento.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  let x = await utils.loginListas();\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_limite\": 1000,\r\n    \"p_nropag\": 0,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_filtro\": '',//searchType == SearchType.ASEGURADOS ? query : '',\r\n    \"p_poliza\": '',//searchType == SearchType.POLIZAS ? query : '',\r\n    \"p_dominio\": ''\r\n  };\r\n\r\n  if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\r\n    data.p_dominio = context.params.p_dominio;\r\n\r\n  return await utils.getRESTData({\r\n    uri: OBTENER_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n    ok: ((resp) => {\r\n      user.set('Poliza', JSON.stringify(resp.p_list_dominios_polizas[0]));\r\n    }),\r\n    error: ((error) => {\r\n      user.set('Poliza', null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"obtener_poliza","type":"USER","id":"JK62A2MOR44M0A85I1MF","filename":"obtener_poliza.js"},{"publishedCode":"let utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('JWTokenPoliza',null)\r\n  user.set('IdSessionPoliza',null)\r\n  return await utils.loginAuxiliar('poliza');\r\n};\r\n\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n.catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","unPublishedCode":null,"name":"login_poliza","type":"USER","id":"BCKRB5YCB4ORP766WDCJ","filename":"login_poliza.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": '',\n    \"p_poliza\": '',\n    \"p_dominio\": user.get('dominioAsegurado')??'AB130KH'\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_dominios_polizas.length == 0 ) {\n        throw \"No hay pÃ³lizas con ese dominio\";\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_dominios_polizas));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const POLIZAS_CARTERA_URL = 'rws/listados/LIST_POLIZA_CARTERA';\nlet utils = require('utils');\n\nconst main = async () => {\n\n  if (utils.isInvalidJWT(user.get('JWTokenListados')))\n    await utils.loginAuxiliar('listados');\n\n\n  let data =\n  {\n    \"p_cod_asegu\": null,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_cod_sec\": \"3\", //3 -> automotores\n    \"p_cod_subramo\": null,\n    \"p_endoso\": null,\n    \"p_estado\": null,\n    \"p_limite\": 1000,\n    \"p_medio_pago\": null,\n    \"p_nropag\": 0,\n    \"p_regxpag\": 25,\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_patente\" : user.get('dominioAsegurado')??'AB130KH',\n    \"p_poliza\": null,\n    \"p_tiene_siniestro\": null,\n    \"p_regxpag\": 25,\n    \"p_tiene_siniestro\": null\n  }\n\n\n  return await utils.getRESTData({\n    uri: POLIZAS_CARTERA_URL,\n    data: data,\n    token: user.get('JWTokenListados'),\n\n    ok: ((resp) => {\n      user.set('Polizas', JSON.stringify(resp.p_list_poliza_cartera));\n      bmconsole.log('ok');\n    }),\n    error: ((error) => {\n      bmconsole.log('error');\n      user.set('Polizas', null);\n    }),\n  });\n\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","name":"obtener_polizas_dominio","type":"USER","id":"2RJC4TR22S688YEX855K","filename":"obtener_polizas_dominio.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"login_listas2","type":"USER","id":"H2Z0Y1R5XR6VC0VSA17Q","filename":"login_listas2.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  await utils.loginAuxiliar('denuncia_asegurado');\n};\n\nmain()\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_denuncia_asegurado","type":"USER","id":"AESZVRIXUCLN5ZG0RQ6D","filename":"login_denuncia_asegurado.js"},{"publishedCode":"const OBTENER_SINIESTROS = 'rws/listados/LISTADO_SINIESTROS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_regxpag\": 1000,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_cod_poliza\": null,\n    \"p_cod_sec\": null,\n    \"p_t_carga_web\": null,\n    \"p_o_siniestro\": null,\n    \"p_cod_suc\": null,\n    \"p_o_aviso\": null,\n    \"p_x_asegurado\": \"\",\n    \"p_x_tramitador\": null,\n    \"p_fec_siniestro\": '', // Hoy menos 90 dÃ­as\n    \"p_fec_hasta\": null,\n    \"p_estado\": null\n  };\n\n  /*if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\n    data.p_dominio = context.params.p_dominio;*/\n\n  return await utils.getRESTData({\n    uri: OBTENER_SINIESTROS,\n    data: data,\n    token: user.get('JWTokenListados'),\n    ok: ((resp) => {\n      user.set('Siniestros', JSON.stringify(resp.p_list_siniestros));\n    }),\n    error: ((error) => {\n      user.set('Siniestros', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"consulta_siniestro","type":"USER","id":"JP5VIL6BWLWZZIUX0XN1","filename":"consulta_siniestro.js"},{"publishedCode":"const OBTENER_DENUNCIA_SINIESTRO = 'rws/denuncia_asegurado/DENUNCIA_SINIESTRO';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_cod_sec\": 3,\n    \"p_siniestro\": 3946965\n  };\n\n  /*if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\n    data.p_dominio = context.params.p_dominio;*/\n\n  return await utils.getRESTData({\n    uri: OBTENER_DENUNCIA_SINIESTRO,\n    data: data,\n    token: user.get('JWTokenDenunciaAsegurado'),\n    ok: ((resp) => {\n      user.set('URLDenuncia', resp.p_url_denuncia);\n    }),\n    error: ((error) => {\n      user.set('URLDenuncia', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"obtener_denuncia_siniestro","type":"USER","id":"45K38WVJ8B2KBVSZVPQ7","filename":"obtener_denuncia_siniestro.js"},{"id":"WLKE1TT6FCMSIVB46PQT","name":"obtener_poliza_asegurado","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/ASEGURADOS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": user.get('cuitAsegurado')??'27256265864',\n    \"p_poliza\": '',\n    \"p_dominio\": ''\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_dominios_polizas.length == 0 ) {\n        throw \"No hay pÃ³lizas con ese asegurado\";\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_dominios_polizas));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","filename":"obtener_poliza_asegurado.js"},{"publishedCode":"const OBTENER_ASEGURADO_URL = 'rws/listas/LIST_ASEGURADOS';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  user.set('error',null);\r\n\r\n  await utils.loginListas();\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_limite\": 1000,\r\n    \"p_nropag\": 0,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_filtro\": user.get('cuitAsegurado'),\r\n    \"p_regxpag\": 11,\r\n  };\r\n\r\n  user.set('Asegurado', null);\r\n  user.set('Asegurados', null);\r\n  user.set(\"cantidadDeAsegurados\", null);\r\n \r\n  return await utils.getRESTData({\r\n    uri: OBTENER_ASEGURADO_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n    ok: ((resp) => {    \r\n      if (resp.p_list_asegurados.length == 0 ) {\r\n        result.text(\"No hay asegurados con esos datos\");\r\n      } else {\r\n        let asegurados = [];\r\n\r\n        resp.p_list_asegurados.forEach( r => {\r\n          asegurados.push({\r\n            ape_nom_rsoc : r.ape_nom_rsoc,\r\n            cod_asegurado: r.cod_asegurado,\r\n            cuit: `${r.cuit}`,\r\n          });\r\n        });\r\n\r\n        if (asegurados.length >= 10 ) {\r\n          bmconsole.error(`[ERROR]: demasiados asegurados con esos datos. Mostrando solo las primeros 10`);\r\n          asegurados = asegurados.slice(0,10);\r\n        }\r\n        user.set('Asegurado', JSON.stringify(asegurados[0]));\r\n        user.set('Asegurados', JSON.stringify(asegurados));\r\n        user.set(\"cantidadDeAsegurados\" , asegurados.length);\r\n\r\n      }\r\n    }),\r\n    error: ((error) => {\r\n      user.set('Asegurado', null);\r\n      user.set('Asegurados', null);\r\n      user.set(\"cantidadDeAsegurados\", null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n    result.text(\"Hubo un error al buscar los datos del asegurado\");\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"list_asegurados","type":"USER","id":"LOTDBBBXN24YONWVUK1J","filename":"list_asegurados.js"},{"id":"YK2RK4XPZ46HOTRTGC08","name":"obtener_polizas.js","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"obtener_polizas_js.js"},{"publishedCode":"const POLIZAS_CARTERA_URL = 'rws/listados/LIST_POLIZA_CARTERA';\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  user.set('Polizas', JSON.stringify([]));\r\n  user.set(\"cantidadDePolizas\", 0);\r\n  user.set(\"listadoPolizas\", JSON.stringify([]));\r\n\r\n\r\n\r\n  await utils.loginListados();\r\n\r\n  let tipoPoliza = user.get(\"tipoPoliza\");\r\n\r\n  let tipoFiltroPoliza = user.get('tipoFiltroPoliza') ?? 'P';\r\n\r\n  let filtroPoliza = null;\r\n  user.set('error', null);\r\n\r\n  // Valores default para las pruebas\r\n  if (tipoFiltroPoliza == 'C') {\r\n    let asegurados = JSON.parse(user.get('Asegurados'));\r\n    let opcionAsegurado = null;\r\n    try {\r\n      opcionAsegurado = JSON.parse(user.get('opcionAsegurado'));\r\n      let i = opcionAsegurado.id;\r\n      filtroPoliza = `${asegurados[i].cod_asegurado}`;\r\n    } catch {\r\n      filtroPoliza = `${asegurados[0].cod_asegurado}`\r\n    }\r\n\r\n    // TODO -> try/catch\r\n  } else if (tipoFiltroPoliza == 'D') {\r\n    filtroPoliza = user.get('dominioAsegurado') ?? 'AB130KH';\r\n    // Para el caso de que la pÃ³liza tenga exactamente 6 dÃ­gitos, le agrego el -\r\n    if (filtroPoliza.length == 6) {\r\n      filtroPoliza = filtroPoliza.substring(0, 3) + '-' + filtroPoliza.substring(3, 6);\r\n    }\r\n  } else if (tipoFiltroPoliza == 'P') {\r\n    filtroPoliza = user.get('numeroPoliza') ?? '5936614';\r\n  }\r\n  filtroPoliza = filtroPoliza.toUpperCase()\r\n\r\n\r\n\r\n  let data =\r\n  {\r\n    \"p_cod_asegu\": tipoFiltroPoliza == 'C' ? filtroPoliza : null,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_cod_sec\": utils.getSeccionByLabel(tipoPoliza),\r\n    \"p_cod_subramo\": null,\r\n    \"p_endoso\": null,\r\n    \"p_estado\": \"VIG\",\r\n    \"p_limite\": 1000,\r\n    \"p_medio_pago\": null,\r\n    \"p_nropag\": 0,\r\n    \"p_regxpag\": 25,\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_patente\": tipoFiltroPoliza == 'D' ? filtroPoliza : null,\r\n    \"p_poliza\": tipoFiltroPoliza == 'P' ? filtroPoliza : null,\r\n    \"p_tiene_siniestro\": null,\r\n    \"p_regxpag\": 25,\r\n    \"p_tiene_siniestro\": null\r\n  };\r\n  bmconsole.log(JSON.stringify(data));\r\n\r\n  let polizasDebitoAutomatico = false;\r\n  return await utils.getRESTData({\r\n    uri: POLIZAS_CARTERA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListados'),\r\n\r\n    ok: ((resp) => {\r\n      if (resp.p_list_poliza_cartera.length == 0) {\r\n        user.set('Polizas', JSON.stringify([]));\r\n        user.set(\"cantidadDePolizas\", 0);\r\n        user.set(\"listadoPolizas\", JSON.stringify([]));\r\n        return;\r\n      } else {\r\n        let polizas_all = utils.getUniquePolizas(resp.p_list_poliza_cartera);\r\n        // En el caso de que hayan pedido cuponera, elimino las que tienen otras formas de pago\r\n        let polizas = [];\r\n        let codDocumento = user.get(\"consultaPoliza\") ?? '';\r\n        for (let i = 0; i < polizas_all.length; i++) {\r\n          //if (codDocumento.toUpperCase() != 'CUPONERA' || (polizas_all[i].forma_pago != null && polizas_all[i].forma_pago.toUpperCase() == 'CUPONERA'))\r\n            polizas.push(polizas_all[i]);\r\n        }\r\n        if ( codDocumento.toUpperCase() == 'CUPONERA' && polizas.length == 0)\r\n          polizasDebitoAutomatico = true;\r\n        if (polizas.length >= 10) {\r\n          bmconsole.error(`[ERROR]: demasiadas pÃ³lizas con ese asegurado. Mostrando solo las primeras 10`);\r\n          polizas = polizas.slice(0, 10);\r\n        }\r\n        user.set('Polizas', JSON.stringify(polizas));\r\n        user.set(\"cantidadDePolizas\", polizas.length);\r\n      }\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.log('error');\r\n      user.set('Polizas', JSON.stringify([]));\r\n      user.set(\"cantidadDePolizas\", 0);\r\n      user.set(\"listadoPolizas\", JSON.stringify([]));\r\n      throw \"No hay pÃ³lizas con esos datos\";\r\n    }),\r\n  });\r\n\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch((err) => {\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"obtener_polizas","type":"USER","id":"BJENXJC7G2HONYC3OGL3","filename":"obtener_polizas.js"},{"publishedCode":"\nconst main = async () => {\n  let listadoPolizas = [];\n  let polizas = user.get(\"Polizas\");\n  if (polizas != null) {\n    // TODO -> try/catch\n    polizas = JSON.parse(polizas);\n    let i = 0;\n    polizas.forEach((p) => {\n      listadoPolizas.push({\n        id: i,\n        name: `${p.p_x_idriesgo} ${p.fec_vig} \\nEnd. ${p.endoso}/${p.tipo_emision}`\n      });\n      i++;\n    });\n    user.set('listadoPolizas', JSON.stringify(listadoPolizas));\n  } else {\n    throw new Error('Error en la elegir_polizas');\n  }\n\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch((err) => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });","unPublishedCode":null,"name":"elegir_poliza","type":"USER","id":"SCJBRRB3CX6SCRTMTBX3","filename":"elegir_poliza.js"},{"publishedCode":"const polizas = JSON.parse(user.get('Polizas'));\n\nconst main = async () => {\n  let result = polizas.reduce((acc, d) => {\n    const found = acc.find(a => a === d.poliza);\n    if (!found) {\n      acc.push(d.poliza);\n    }\n    return acc;\n  }, []);\n  result = result.sort( (a,b) => {\n    if ( a.name < b.name )\n      return -1;\n    if ( a.name > b.name )\n      return 1;\n    return 0;\n  });\n  result = result.map( (v) => {\n    return polizas[v.index];\n  });\n  return result;\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    bmconsole.error(err);\n  })\n  .finally(() => {\n    result.done();\n  });\n\n\n\n\n  ","unPublishedCode":null,"name":"reduce_polizas","type":"USER","id":"YES6LXQTFNWSL66WIM1M","filename":"reduce_polizas.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_secciones","type":"USER","id":"IFRNS4HAX308U238MOPB","filename":"list_secciones.js"},{"publishedCode":"const utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n  user.set('JWTokenListas',null);\n  user.set('IdSessionListas',null);\n  return await utils.loginListas();\n};\n\nmain()\n  .then ((x) => {\n    bmconsole.log(`JWTokenListas -> ${user.get('JWTokenListas')}`);\n  })\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_listas","type":"USER","id":"O25O8OGXQWZ0AEMWCI5G","filename":"login_listas.js"},{"id":"B8R18LWYNW5SB3UITJJA","name":"test","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"test.js"},{"id":"Y5IC0VQ75RR8YOR2GP31","name":"maintest","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"maintest.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"login2","type":"USER","id":"1ZSPXZIIBBYU40NBPIF6","filename":"login2.js"},{"publishedCode":"const POLIZAS_CARTERA_URL = 'rws/listados/LISTADO_SINIESTROS';\nlet utils = require('utils');\n\nconst main = async () => {\n\n  await utils.loginAuxiliar('listados');\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_regxpag\": 1000,\n    \"p_cod_poliza\": null,\n    \"p_cod_sec\": null,//\", //3 -> automotores\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_t_carga_web\": null,\n    \"p_o_siniestro\": null,\n    \"p_cod_suc\": null,\n    \"p_o_aviso\": null,\n    \"p_x_asegurado\": \"\",\n    \"p_x_tramitador\": null,\n    \"p_fec_siniestro\": '17/09/2024'/* startDate ??\n        DateFormat('dd/MM/yyyy')\n            .format(DateTime.now().subtract(Duration(days: 90))),\n    \"p_fec_hasta\": endDate ?? DateFormat('dd/MM/yyyy').format(DateTime.now())*/,\n    \"p_estado\": null\n  };\n\n  user.set('Siniestros', null);\n\n  return await utils.getRESTData({\n    uri: POLIZAS_CARTERA_URL,\n    data: data,\n    token: user.get('JWTokenListados'),\n\n    ok: ((resp) => {\n      user.set('Siniestros', JSON.stringify(resp.p_list_siniestros));\n      bmconsole.log('ok');\n    }),\n    error: ((error) => {\n      bmconsole.log('error');\n      user.set('Siniestros', null);\n    }),\n  });\n\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_siniestros","type":"USER","id":"K2VDIOXHPU1EEGKILU0N","filename":"list_siniestros.js"},{"publishedCode":"const CONTACTOS_URL = 'rws/general/DATOS_CONTACTO';\nlet utils = require('utils');\n\ngetContactData = async (contactType) => {\n  data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_tipo\": contactType,\n  };\n  var retVal = [];\n  await utils.getRESTData({\n    uri: CONTACTOS_URL,\n    data: data,\n    token: user.get('JWTokenGeneral'),\n\n    ok: ((resp) => {\n      resp.p_list_contactos.forEach(element => {\n        retVal.push(element.contacto);\n      });\n    }),\n    error: ((error) => {\n      return [];\n    }),\n  });\n  return retVal;\n\n}\n\nconst main = async () => {\n\n  await utils.loginGeneral();\n\n\n  var finalData =  await getContactData(1);\n  //var y = await getContactData(2);\n\n  user.set('contactList',finalData.join('\\n'));\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n    usr.set('error', null);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_contactos","type":"USER","id":"4NI7VW6BKLFVVKXR206B","filename":"list_contactos.js"},{"publishedCode":"const main = async () => {\n  /*await result.buttonsBuilder()\n  .text('select an option')\n  .addButton('1', 'Flujo normal')\n  .addButton('2', 'Sin credenciales almacenadas?')\n  .send();*/\n  result.gotoRule('Flujo normal');\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n\n  .catch(err => {\n    bmconsole.error(`[ERROR]: ${err.message}`);\n    result.text(JSON.parse(user.get('Polizas')));//`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"pod","type":"USER","id":"UMQGWILH0E2ESB40PC8K","filename":"pod.js"},{"id":"CM4WDIA4FVI401MK7WJU","name":"test","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"test.js"},{"id":"DVWWVFTJD6RFLFZL0OW6","name":"test","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"test.js"},{"id":"4U6KC8HFVEDAWM326KS0","name":"test2","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"test2.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"send_file","type":"USER","id":"IZ0VJ2YMCHNPXCHAKDJ3","filename":"send_file_0.js"},{"id":"P3Q4I88CL8DPVFBJ06M7","name":"send_file","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"send_file.js"},{"publishedCode":"\nsendFile: async (fileName, fileContent, mediaType = 'application/pdf') => {\n  let chatPlatform = context.message.CHAT_PLATFORM_ID;\n\n  // TODO: ver si hay alguna manera de no tenerlo harcoded\n  const accessTokenV1 = 'eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiaG9sYW5kb3NlZ3Vyb3MiLCJuYW1lIjoiTGlsaWFuYSBTaWx2YSIsImFwaSI6dHJ1ZSwiaWQiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIiwiZXhwIjoxODcxNTc4Nzg1LCJqdGkiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIn0.BCNWvf9uqejdRxjBI9-AlqLDUYGIXBGDx8kutmFsDLKHfayox1V2B3noK02j0OSCK3cij1_51e35MNU8kJSisA';\n  const bmApiUrl = 'https://go.botmaker.com/api/v1.0';\n\n\n  if (chatPlatform == 'whatsapp') {\n    let chatChannelNumber = null;\n    try {\n        let ids = context.message.CHAT_CHANNEL_ID.split('-');\n        chatChannelNumber = ids[2];\n    } catch (error) {\n      throw 'Error al intentar recuperar el channel number'      \n    }\n    let platformContactId = context.message.FROM;\n    const blob = Buffer.from(fileContent, 'base64');\n\n\n    const formData = {\n      // Pass a simple key-value pair\n      chatPlatform: chatPlatform,\n      chatChannelNumber: chatChannelNumber,\n      platformContactId: platformContactId,\n      mediaType: mediaType,\n      file: {\n        value: blob,\n        options: {\n          filename: fileName,\n          contentType: mediaType\n        }\n      }\n    };\n\n    const url = `${bmApiUrl}/message/binary/v3`;\n\n    await rp({\n      uri: url,\n      method: 'POST',\n      formData: formData,\n      json: true,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Accept': 'application/json',\n        'access-token': accessTokenV1,\n      }\n    })\n      .then((resp) => {\n        bmconsole.log('ok');\n      })\n      .catch((error) => {\n        bmconsole.error(`[ERROR] : ${error.message}`);\n        user.set('error', error);\n      });\n  }\n  else {\n    result.file(`data:${mediaType};base64,${fileContent}`, fileName);\n  } \n}","unPublishedCode":null,"name":"send_document","type":"USER","id":"6NFIFDX5S1YTDMFIGMMJ","filename":"send_document.js"},{"id":"G4MDEUSZFKA6HM6KVHI2","name":"list_secciones","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_secciones.js"},{"publishedCode":"\nconst main = async () => {\n  let listadoAsegurados = [];\n  let Asegurados = user.get(\"Asegurados\");\n  if (Asegurados != null) {\n    // TODO -> try/catch\n    Asegurados = JSON.parse(Asegurados);\n    let i = 0;\n    Asegurados.forEach((p) => {\n      listadoAsegurados.push({\n        id: i,\n        name: `${p.ape_nom_rsoc} - ${p.cuit}`\n      });\n      i++;\n    });\n    user.set('listadoAsegurados', JSON.stringify(listadoAsegurados));\n  } else {\n    throw new Error('Error en la elegir_Asegurados');\n  }\n\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch((err) => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });","unPublishedCode":null,"name":"elegir_asegurado","type":"USER","id":"NUPMO4VU33XCWLV3L6FA","filename":"elegir_asegurado.js"},{"id":"MJNDK0QSTTNI04XJU5X0","name":"list_impresiones","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_impresiones.js"},{"id":"6FS14MX3MILDA5XJNKJP","name":"pdf_lib","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"pdf_lib.js"},{"publishedCode":"const OBTENER_ASEGURADO_URL = 'rws/boton_pago_app/LIST_CUOTAS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error', null);\n\n  await utils.loginBotonPago();\n\n\n  let i = 0;\n  try {\n    let opcionPoliza = JSON.parse(user.get('opcionPoliza'));\n    i = opcionPoliza.id;\n  } catch (error) {\n\n  }\n\n  let Polizas = JSON.parse(user.get('Polizas'));\n\n  let Poliza = Polizas[i];\n  let cuotas = [];\n  for (i = 0; i < Polizas.length; i++) {\n    if (Polizas[i].poliza == Poliza.poliza) {\n      let data = {\n        \"p_o_sesion\": user.get('IdSession'),\n        \"p_cod_sec\": Polizas[i].cod_sec,\n        \"p_poliza\": Polizas[i].poliza,\n        \"p_endoso\": Polizas[i].endoso,\n      };\n      await utils.getRESTData({\n        uri: OBTENER_ASEGURADO_URL,\n        data: data,\n        token: user.get('JWTokenBotonPagoApp'),\n        ok: ((resp) => {\n          let maxDate = moment().add(30, 'days').startOf('day');\n          resp.p_list_cuotas.forEach(c => {\n            let fec = moment(c.fec_vto);\n            f = fec.format('DD/MM/YYYY');\n            if (fec <= maxDate && c.estado.toUpperCase() == 'PENDIENTE') {\n              importe = Intl.NumberFormat('es-ar', { style: 'currency', currency: 'EUR' }).format(c.importe);\n              importe = importe.replace('EUR', c.signo_moneda);\n              //i = c.importe.toLocaleString();\n              cuotas.push({\n                fec_vto: fec,\n                texto: `Endoso ${Polizas[i].endoso}, Cuota nro ${c.nro_cuota} Vto:${f} ${importe}`,\n              });\n            }\n          });\n        }),\n        error: ((error) => {\n          bmconsole.error(`[ERROR]: ${err.message}`);\n          result.text(\"Hubo un error al buscar los datos de las cuotas\");\n          return;\n        }),\n      });\n    }\n  }\n\n  // TODO: Ordenar las cuotas por fecha\n  for (let index = 0; index < cuotas.length; index++) {\n    result.text(cuotas[index].texto);\n  }\n};\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    bmconsole.error(`[ERROR]: ${err.message}`);\n    result.text(\"Hubo un error al buscar los datos de las cuotas\");\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_cuotas","type":"USER","id":"GR01NN6NRPDH3EGQS307","filename":"list_cuotas.js"},{"publishedCode":"// es igual que la elegir pÃ³liza, pero sin considerar endosos\nconst main = async () => {\n  let listadoPolizas = [];\n  let polizas = user.get(\"Polizas\");\n  if (polizas != null) {\n    // TODO -> try/catch\n    polizas = JSON.parse(polizas);\n    let i = 0;\n    polizas.forEach((p) => {\n      let already = listadoPolizas.some(e => e.poliza == p.poliza);\n      if (!already) {\n        listadoPolizas.push({\n          id: i,\n          poliza: p.poliza,\n          name: `${p.p_x_idriesgo} ${p.poliza}`\n        });\n      }\n      i++;\n    });\n    user.set('listadoPolizas', JSON.stringify(listadoPolizas));\n  } else {\n    throw new Error('Error en la elegir_polizas_u');\n  }\n\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch((err) => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });","unPublishedCode":null,"name":"elegir_polizas_u","type":"USER","id":"24J0MOJPG153EVLYT210","filename":"elegir_polizas_u.js"},{"publishedCode":"const OBTENER_EXIGIBLE_URL = 'rws/listados/LIST_EXIG';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error', null);\n\n  await utils.loginListados();\n\n\n  let i = 0;\n  try {\n    let opcionPoliza = JSON.parse(user.get('opcionPoliza'));\n    i = opcionPoliza.id;\n  } catch (error) {\n\n  }\n\n  let Polizas = JSON.parse(user.get('Polizas'));\n\n  let Poliza = Polizas[i];\n  let cuotas = [];\n  let maxDate = moment().add(30, 'days').startOf('day').format('DD/MM/YYYY');\n  let minDate = '01/01/2000';\n\n  let data =\n  {\n    \"p_cod_asegu\": Poliza.cod_asegu,\n    \"p_cod_sec\": Poliza.cod_sec,\n    \"p_forma_pago\": \"\",\n    \"p_cod_suc\": null,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_regxpag\": 25,\n    \"p_fecha_desde\": minDate,\n    \"p_fecha_hasta\": maxDate,\n  };\n\n\n  await utils.getRESTData({\n    uri: OBTENER_EXIGIBLE_URL,\n    data: data,\n    token: user.get('JWTokenListados'),\n    ok: ((resp) => {\n      resp.p_list_exig.forEach(c => {\n        let re = new RegExp(/[.\\-, ]/g);\n        if (c.poliza.replace(re, '') == Poliza.poliza) {\n          let importe = c.imp_pend_cuota.replaceAll(',', '-').replaceAll('.', ',').replaceAll('-', '.').replaceAll(' ', '');\n          cuotas.push({\n            fec_vto: c.vto_cuota,\n            texto: `Endoso ${c.endoso.replaceAll('.', '')}, Cuota nro ${c.nro_cuota} Vto:${c.vto_cuota} $${importe}`,\n          });\n        }\n      });\n    }),\n    error: ((error) => {\n      bmconsole.error(`[ERROR]: ${error}`);\n      result.text(\"Hubo un error al buscar los datos de las cuotas\");\n      return;\n    }),\n  });\n  for (let index = 0; index < cuotas.length; index++) {\n    result.text(cuotas[index].texto);\n  }\n};\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    bmconsole.error(`[ERROR]: ${err.message}`);\n    result.text(\"Hubo un error al buscar los datos de las cuotas\");\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"list_exigible","type":"USER","id":"46FQ45EM0QMX8TTIPT1R","filename":"list_exigible.js"}]}