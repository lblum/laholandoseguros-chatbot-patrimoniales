{"token":"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiaG9sYW5kb3NlZ3Vyb3MiLCJuYW1lIjoiTGlsaWFuYSBTaWx2YSIsImFwaSI6dHJ1ZSwiaWQiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIiwiZXhwIjoxODcxNTc4Nzg1LCJqdGkiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIn0.BCNWvf9uqejdRxjBI9-AlqLDUYGIXBGDx8kutmFsDLKHfayox1V2B3noK02j0OSCK3cij1_51e35MNU8kJSisA","cas":[{"publishedCode":"const LOGIN_URL = 'rws/holandonet/login';\r\n\r\nconst utils = require('utils');\r\n\r\nconst main = async () => {\r\n  \r\n  user.set('error' , null);\r\n  user.set('JWToken' , null);\r\n  user.set('JWTokenListas' , null);\r\n  user.set('JWTokenPoliza' , null);\r\n  user.set('IdSession' , null);\r\n  user.set('IdSessionListas' , null);\r\n  user.set('IdSessionPoliza' , null);\r\n  user.set('IdSessionListados' , null);\r\n  user.set('JWTokenListados' , null);\r\n  user.set('IdSessionGeneral' , null);\r\n  user.set('JWTokenGeneral' , null);\r\n  user.set('CodProductor' , null);\r\n  user.set('nombre' , null);\r\n  \r\n  let data =\r\n  {\r\n    \"p_usuario\": user.get(\"codUsuario\")??\"PRODEGUTIERREZ\",\r\n    \"p_enc_pwd\": user.get(\"userPassword\")??\"20RBVIDEO22\",\r\n    \"p_cod_t_usuario\": \"P\"\r\n  };\r\n\r\n  return await utils.getRESTData({\r\n    uri: LOGIN_URL,\r\n    data: data,\r\n    ok: ((resp) => {\r\n      bmconsole.log(`Login OK ${resp.payload.p_o_sesion}`);\r\n      user.set('IdSession', resp.payload.p_o_sesion);\r\n      user.set('JWToken', resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.log(`Error en el login ${error}`);\r\n      user.set('IdSession', null);\r\n      user.set('JWToken', null);\r\n    }),\r\n  });\r\n\r\n};\r\n\r\nmain()\r\n  .then ( (x) => {} )\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"login","type":"USER","id":"YRIGN55L0RYS06MWR435","filename":"login.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  await utils.loginAuxiliar('general');\n};\n\nmain()\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_general","type":"USER","id":"KTZ1UKIW20KKCSUL6AWC","filename":"login_general.js"},{"publishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nconst utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": 1207736728//user.get('IdSession')\r\n  };\r\n\r\n\r\n  await utils.getRESTData({\r\n    uri: DATOS_URL,\r\n    data: data,\r\n    token: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJpYXQiOjE3MTUzNzEwMDIsImV4cCI6MTcxNTM3NDYwMiwicGF5bG9hZCI6eyJwX2Vycm9yIjpudWxsLCJwX29fc2VzaW9uIjo0MDU2ODYyMzM2fSwiYXVkIjoibGlzdGFzIn0.IIiR1tOXlH4virBFd5k_iV7g2VnQjBHuP3mL5ry-QFoNKypvDmvxG9krOmsoN9bMqpF5JXwyladRaxWB0TvU_ne-WeCTQeorew-XZ1EgKfyeupasQlR5OSlwt1J34Z8haSr9FNxs6i0mSJecMEaprax3f-igkYhv0QXLVbf7WRJrqQKDyR2gFI2C2VHc0dhb8IQMh588bjaVsPbVtX0FdckOlZA5swqfAcqKp9SAHM8BhUW0XpOQpxFqHGgykjW9q9QOgM5acPLyr-w2sxwqXzcNKjlk4HDqY2kBrqUVECMOJ_7L-Jh72VlqfujbqT4g-0Y439PTqI6Xy0kScm64R9Mz3UC63Vvwdgx8Rx2jwGBMCqwC1kgyWGTbbWrliMPNLT3pnKlz--nOERGkQq9theezgBXGgyBXZhhdCa0VSpAoXNI2s2f5hdHoFnm9r5GS1kSccHtBV4RwLNQno0OtVBc_dTTkbABgE4D2xmQNn67eorHL1VuxjtlzkHHjkkyv4ZOWlO0_tM6humOpxevRICZjMJOBzwZKoO4LtemtQCedzCtIP8i-BxeO-_MPHGWxY4hyb5zSZOa7SdwD0XaL4xcagBFVdzLzIQjWUwSNBKaRSJjTzpy61tQItsOEI8CfQ9-h7Ep0XE4qdBwc63W_0T5bOA7mMyvBJAnML8ujb9Q\",\r\n//    user.get('JWTokenListas'),\r\n\r\n    ok: ((resp) => {\r\n      let usr = resp.p_list_user[0];\r\n      user.set('CodProductor', usr.cod_prod);\r\n      user.set('nombre', usr.nombre_user);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('CodProductor', null);\r\n      user.set('nombre', null);\r\n      throw new Error(error);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","unPublishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nconst utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession')\r\n  };\r\n\r\n\r\n  await utils.getRESTData({\r\n    uri: DATOS_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n\r\n    ok: ((resp) => {\r\n      let usr = resp.p_list_user[0];\r\n      user.set('CodProductor', usr.cod_prod);\r\n      user.set('nombre', usr.nombre_user);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('CodProductor', null);\r\n      user.set('nombre', null);\r\n      throw new Error(error);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","name":"list_datos_user","type":"USER","id":"10HXUTGXJ30JFIS4HGWL","filename":"list_datos_user.js"},{"id":"XUDXHL5UA3SRKHOFQSIU","name":"list_medios_pago","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_medios_pago.js"},{"id":"WKBIUXYCX5IOUS8DJVGL","name":"list_poliza_cartera","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_poliza_cartera.js"},{"id":"AAEY3YF56UF0E7LZO83W","name":"datos_contacto","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"datos_contacto.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"login_listados","type":"USER","id":"ZFMAX76R5RN0ESNO05XT","filename":"login_listados.js"},{"publishedCode":"  getBaseURL: () => {\r\n\r\n    //return 'https://nthnet.laholando.com/';\r\n    return 'https://hnet.laholando.com/';\r\n  },\r\n\r\n  checkRESTError : (resp) => {\r\n\r\n    try {\r\n      if (_.has(resp, 'payload') && _.has(resp.payload, 'p_error'))\r\n        return resp.payload.p_error;\r\n      if (_.has(resp, 'p_error') && resp.p_error != 0)\r\n        return resp.p_error;\r\n\r\n    } catch (error) {\r\n      bmconsole.log(error);\r\n    }\r\n    return null;\r\n  },\r\n\r\ngetRESTData : async (cfg) => {\r\n\r\n  // OJO!!!\r\n  // Esto no debiera ser necesario (y es un problema para la seguridad)\r\n  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\n  let url = utils.getBaseURL() + cfg.uri;\r\n\r\n  var headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n\r\n  if (cfg.token) {\r\n    headers['X-authorization'] = 'Bearer ' + cfg.token;\r\n  }\r\n\r\n  /*\r\n  bmconsole.log(url);\r\n  bmconsole.log(JSON.stringify(cfg.data));\r\n  bmconsole.log(cfg.data.p_o_sesion);\r\n  */\r\n\r\n  return rp({\r\n    uri: url,\r\n    method: 'POST',\r\n    body: cfg.data,\r\n    json: true,\r\n    headers: headers\r\n  })\r\n    .then((resp) => {\r\n      let error = utils.checkRESTError(resp);\r\n      if (error)\r\n        throw new Error(error);\r\n      if (cfg.ok)\r\n        cfg.ok(resp);\r\n    })\r\n    .catch((error) => {\r\n      bmconsole.error(`[ERROR] : ${error.message}`);\r\n\r\n      user.set('error', error);\r\n      if (cfg.error)\r\n        cfg.error(error);\r\n    })\r\n    .finally(() => {\r\n      result.done();\r\n    });\r\n},\r\n\r\nisInvalidJWT: (token) => {\r\n  try {\r\n    let parsedJWT = _.split(token, '.');\r\n    // En el 2do está la expiración\r\n    let data = Buffer.from(parsedJWT[1], 'base64').toString();\r\n    let jwtData = JSON.parse(data);\r\n    return _.now() > jwtData['exp'] * 1000;\r\n\r\n  } catch (error) {\r\n    if (token) {\r\n      bmconsole.log('-=[Error en la isJWTExpired]=-')\r\n      bmconsole.log(error);\r\n    }\r\n  }\r\n  return true;\r\n},\r\n\r\nloginAuxiliar: async (sistema) => {\r\n\r\n  // TODO: Pasar a constantes\r\n  let data =\r\n  {\r\n    \"p_usuario\": \"PRODUSU\",\r\n    \"p_enc_pwd\": \"PRODUSU\"\r\n  };\r\n\r\n  let uri = `rws/${sistema}/login`;\r\n\r\n  sistema = _.startCase(sistema).replace(' ','');\r\n\r\n  return await utils.getRESTData({\r\n    uri: uri,\r\n    data: data,\r\n    token: user.get('JWToken'),\r\n    ok: ((resp) => {\r\n      bmconsole.log(`Login ${sistema} OK`)\r\n      user.set(`IdSession${sistema}`, resp.payload.p_o_sesion);\r\n      user.set(`JWToken${sistema}`, resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.error(`Login ${sistema} ${error}`)\r\n      user.set(`IdSession${sistema}`, null);\r\n      user.set(`JWToken${sistema}`, null);\r\n    }),\r\n  });\r\n},\r\n\r\n loginListas: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenListas')))\r\n    return utils.loginAuxiliar('listas');\r\n},\r\n\r\nloginListados: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenListados')))\r\n    return await utils.loginAuxiliar('listados');\r\n},\r\n\r\nloginPoliza: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenPoliza')))\r\n    return utils.loginAuxiliar('poliza');\r\n},\r\n\r\nloginDenunciaAsegurado: async () => {\r\n  if (utils.isInvalidJWT(user.get('JWTokenDenunciaAsegurado')))\r\n    return utils.loginAuxiliar('denuncia_asegurado');\r\n}\r\n\r\n","unPublishedCode":null,"name":"utils","type":"USER","id":"JLEJ1NR21T6JN2SWOPPI","filename":"utils.js"},{"publishedCode":"const DOCUMENTO_POLIZA_URL = 'rws/poliza/OBTENER_DOCUMENTO';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_cod_documento\": \"CREDENCIAL\",\r\n    \"p_cod_sec\": 0,\r\n    \"p_poliza\": 0,\r\n    \"p_endoso\": 0\r\n  };\r\n\r\n  let ordenPoliza = 0;\r\n\r\n  if (context.params.codDocumento != null && (context.params.codDocumento ?? '') != '')\r\n    data.p_cod_documento = context.params.p_cod_documento;\r\n\r\n  if (context.params.ordenPoliza != null && (context.params.ordenPoliza ?? '') != '')\r\n    ordenPoliza = context.params.ordenPoliza;\r\n\r\n  let Polizas = JSON.parse(user.get('Polizas'));\r\n  let Poliza = Polizas[ordenPoliza];\r\n  data.p_cod_sec = Poliza.cod_sec;\r\n  data.p_poliza = Poliza.poliza;\r\n  let fileName = `${data.p_cod_documento}-${data.p_poliza}.pdf`;\r\n\r\n  return await utils.getRESTData({\r\n    uri: DOCUMENTO_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenPoliza'),\r\n    ok: ((resp) => {\r\n      result.file(`data:application/pdf;base64,${resp.p_documento}`, fileName);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('copiaPoliza', null);\r\n      result.text(`Hubo un error al traer el documento de la póliza: ${error}`)\r\n        ;\r\n    }),\r\n  });\r\n\r\n\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n\r\n  .catch(err => {\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"poliza_obtener_documento","type":"USER","id":"JK3G2Q66BXEVYMUJVS0X","filename":"poliza_obtener_documento.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  let x = await utils.loginListas();\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_limite\": 1000,\r\n    \"p_nropag\": 0,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_filtro\": '',//searchType == SearchType.ASEGURADOS ? query : '',\r\n    \"p_poliza\": '',//searchType == SearchType.POLIZAS ? query : '',\r\n    \"p_dominio\": ''\r\n  };\r\n\r\n  if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\r\n    data.p_dominio = context.params.p_dominio;\r\n\r\n  return await utils.getRESTData({\r\n    uri: OBTENER_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n    ok: ((resp) => {\r\n      user.set('Poliza', JSON.stringify(resp.p_list_dominios_polizas[0]));\r\n    }),\r\n    error: ((error) => {\r\n      user.set('Poliza', null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"obtener_poliza","type":"USER","id":"JK62A2MOR44M0A85I1MF","filename":"obtener_poliza.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  return await utils.loginPoliza();\n};\n\nmain()\n  .then((x) => {\n    bmconsole.log(`Login Poliza OK`);\n  })\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":"let utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('JWTokenPoliza',null)\r\n  user.set('IdSessionPoliza',null)\r\n  await utils.loginAuxiliar('poliza');\r\n  bmconsole.log(user.get('IdSessionPoliza'));\r\n  bmconsole.log(user.get('JWTokenPoliza'));};\r\n\r\nmain()\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","name":"login_poliza","type":"USER","id":"BCKRB5YCB4ORP766WDCJ","filename":"login_poliza.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": '',\n    \"p_poliza\": '',\n    \"p_dominio\": user.get('dominioAsegurado')??'AB130KH'\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_dominios_polizas.length == 0 ) {\n        throw \"No hay pólizas con ese dominio\";\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_dominios_polizas));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"obtener_polizas_dominio","type":"USER","id":"2RJC4TR22S688YEX855K","filename":"obtener_polizas_dominio.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"login_listas2","type":"USER","id":"H2Z0Y1R5XR6VC0VSA17Q","filename":"login_listas2.js"},{"publishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  await utils.loginAuxiliar('denuncia_asegurado');\n};\n\nmain()\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","unPublishedCode":null,"name":"login_denuncia_asegurado","type":"USER","id":"AESZVRIXUCLN5ZG0RQ6D","filename":"login_denuncia_asegurado.js"},{"id":"JP5VIL6BWLWZZIUX0XN1","name":"consulta_siniestro","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"consulta_siniestro.js"},{"id":"45K38WVJ8B2KBVSZVPQ7","name":"obtener_denuncia_siniestro","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"obtener_denuncia_siniestro.js"},{"id":"WLKE1TT6FCMSIVB46PQT","name":"obtener_poliza_asegurado","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/ASEGURADOS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": user.get('cuitAsegurado')??'27256265864',\n    \"p_poliza\": '',\n    \"p_dominio\": ''\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_dominios_polizas.length == 0 ) {\n        throw \"No hay pólizas con ese asegurado\";\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_dominios_polizas));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","filename":"obtener_poliza_asegurado.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_ASEGURADOS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": user.get('cuitAsegurado')??'27256265864',\n    \"p_poliza\": '',\n    \"p_dominio\": ''\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_asegurados.length == 0 ) {\n        throw \"No hay pólizas con ese asegurado\";\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_dominios_polizas));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_POLIZAS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": user.get('cuitAsegurado')??'27256265864',\n    \"p_poliza\": '',\n    \"p_dominio\": ''\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_POLIZA_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_polizas.length == 0 ) {\n        throw \"No hay pólizas con ese asegurado\";\n      } else {\n        if (resp.p_list_polizas.length >= 10 ) {\n          bmconsole.error(`[ERROR]: demasiada pólizas con ese asegurado. Mostrando solo la primera`);\n        }\n      }\n      user.set('Polizas', JSON.stringify(resp.p_list_polizas.slice(0,1)));\n    }),\n    error: ((error) => {\n      user.set('Polizas', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","name":"obtener_polizas_asegurado","type":"USER","id":"MVIHO4SLLXBN77RWNP2Y","filename":"obtener_polizas_asegurado.js"},{"id":"LOTDBBBXN24YONWVUK1J","name":"list_asegurados","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const OBTENER_ASEGURADO_URL = 'rws/listas/LIST_ASEGURADOS';\n\nlet utils = require('utils');\n\nconst main = async () => {\n\n  user.set('error',null);\n\n  let data = {\n    \"p_o_sesion\": user.get('IdSession'),\n    \"p_limite\": 1000,\n    \"p_nropag\": 0,\n    \"p_cod_prod\": user.get('CodProductor'),\n    \"p_filtro\": user.get('cuitAsegurado')??'27256265864',\n    \"p_regxpag\": 10,\n  };\n \n  return await utils.getRESTData({\n    uri: OBTENER_ASEGURADO_URL,\n    data: data,\n    token: user.get('JWTokenListas'),\n    ok: ((resp) => {    \n      if (resp.p_list_asegurados.length == 0 ) {\n        throw \"Asegurado inexistente\";\n      }\n      user.set('Asegurado', JSON.stringify(resp.p_list_asegurados[0]));\n    }),\n    error: ((error) => {\n      user.set('Asegurado', null);\n    }),\n  });\n};\n\nmain()\n  .then((x) => {\n    ;\n  })\n  .catch(err => {\n    // Code on error\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","filename":"list_asegurados.js"}]}