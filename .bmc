{"token":"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiaG9sYW5kb3NlZ3Vyb3MiLCJuYW1lIjoiTGlsaWFuYSBTaWx2YSIsImFwaSI6dHJ1ZSwiaWQiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIiwiZXhwIjoxODcxNTc4Nzg1LCJqdGkiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIn0.BCNWvf9uqejdRxjBI9-AlqLDUYGIXBGDx8kutmFsDLKHfayox1V2B3noK02j0OSCK3cij1_51e35MNU8kJSisA","cas":[{"publishedCode":"const LOGIN_URL = 'rws/holandonet/login';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n  user.set('JWToken', null);\r\n  user.set('JWTokenListas', null);\r\n  user.set('JWTokenPoliza', null);\r\n\r\n  let data =\r\n  {\r\n    \"p_usuario\": \"PRODEGUTIERREZ\",\r\n    \"p_enc_pwd\": \"20RBVIDEO22\"\r\n  };\r\n/*\r\n  if (context.params.user != null && (context.params.user?? '') != '')\r\n    data.p_usuario = context.params.user;\r\n  if (context.params.password != null && (context.params.password??'') != '')\r\n    data.p_enc_pwd = context.params.password;\r\n*/\r\n\r\n\r\n  return await utils.getRESTData({\r\n    uri: LOGIN_URL,\r\n    data: data,\r\n    ok: ((resp) => {\r\n      bmconsole.log(`Login OK`);\r\n      user.set('IdSession', resp.payload.p_o_sesion);\r\n      user.set('JWToken', resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.log(`Error en el login ${error}`);\r\n      user.set('IdSession', null);\r\n      user.set('JWToken', null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":null,"name":"login","type":"USER","id":"YRIGN55L0RYS06MWR435","filename":"login.js"},{"id":"KTZ1UKIW20KKCSUL6AWC","name":"login_general","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"login_general.js"},{"publishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  return  utils.loginListas();\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    bmconsole.log(`Login listas OK`);\r\n  })\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    //result.done();\r\n  });","unPublishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  return  utils.loginListas();\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    bmconsole.log(`Login listas OK`);\r\n  })\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","name":"login_listas","type":"USER","id":"JV7J4MTHOMJF7OWM7JLY","filename":"login_listas.js"},{"publishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n  };\r\n\r\n\r\n  return utils.getRESTData({\r\n    uri: DATOS_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n\r\n    ok: ((resp) => {\r\n      bmconsole.log('Ok -> list_datos_user');\r\n      bmconsole.log(JSON.stringify(resp));\r\n      let usr = resp.p_list_user[0];\r\n      user.set('CodProductor', usr.cod_prod);\r\n      user.set('nombre', usr.nombre_user);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('CodProductor', null);\r\n      user.set('nombre', null);\r\n      throw new Error(error);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    bmconsole.log(`List datos usuario OK`);\r\n  })\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","unPublishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  user.set('error', null);\r\n\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n  };\r\n\r\n  bmconsole.log('list_datos_user');\r\n\r\n  return utils.getRESTData({\r\n    uri: DATOS_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n\r\n    ok: ((resp) => {\r\n      bmconsole.log('Ok -> list_datos_user');\r\n      bmconsole.log(JSON.stringify(resp));\r\n      let usr = resp.p_list_user[0];\r\n      user.set('CodProductor', usr.cod_prod);\r\n      user.set('nombre', usr.nombre_user);\r\n    }),\r\n    error: ((error) => {\r\n      user.set('CodProductor', null);\r\n      user.set('nombre', null);\r\n      throw new Error(error);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    bmconsole.log(`List datos usuario OK`);\r\n  })\r\n  .catch(err => {\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    result.done();\r\n  });","name":"list_datos_user","type":"USER","id":"10HXUTGXJ30JFIS4HGWL","filename":"list_datos_user.js"},{"id":"XUDXHL5UA3SRKHOFQSIU","name":"list_medios_pago","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_medios_pago.js"},{"id":"WKBIUXYCX5IOUS8DJVGL","name":"list_poliza_cartera","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_poliza_cartera.js"},{"id":"AAEY3YF56UF0E7LZO83W","name":"datos_contacto","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"datos_contacto.js"},{"id":"ZFMAX76R5RN0ESNO05XT","name":"login_listados","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"login_listados.js"},{"publishedCode":"function getBaseURL() {\r\n\r\n  //return 'https://nthnet.laholando.com/';\r\n  return 'https://hnet.laholando.com/';\r\n}\r\n\r\nfunction checkRESTError(resp) {\r\n\r\n  try {\r\n    if (_.has(resp,'payload')  && _.has(resp.payload,'p_error'))\r\n        return resp.payload.p_error;\r\n    if (_.has(resp,'p_error') && resp.p_error != 0)\r\n      return resp.p_error;\r\n\r\n  } catch (error) {\r\n    bmconsole.log(error);\r\n  }\r\n  return null;\r\n\r\n}\r\n\r\nfunction getRESTData(cfg) {\r\n  let url = this.getBaseURL() + cfg.uri;\r\n\r\n  var headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n\r\n  if (cfg.token) {\r\n    headers['X-authorization'] = 'Bearer ' + cfg.token;\r\n  }\r\n\r\n  bmconsole.log(`getRESTData ${JSON.stringify(cfg)}`)\r\n  bmconsole.log(`getRESTData ${url}`)\r\n\r\n  return rp({\r\n    uri: url,\r\n    method: 'POST',\r\n    body: cfg.data,\r\n    json: true,\r\n    headers: headers\r\n  })\r\n    .then((resp) => {\r\n      let error = this.checkRESTError(resp);\r\n      if (error)\r\n        throw new Error(error);\r\n      if (cfg.ok)\r\n        cfg.ok(resp);\r\n    })\r\n    .catch((error) => {\r\n      result.text(`[ERROR] : ${error.message}`);\r\n\r\n      user.set('error', error);\r\n      if (cfg.error)\r\n        cfg.error(error);\r\n    })\r\n    .finally(() => {      \r\n      result.done();\r\n    });\r\n}\r\n\r\nfunction isInvalidJWT(token) {\r\n  try {\r\n    let parsedJWT = _.split(token, '.');\r\n    // En el 2do está la expiración\r\n    let data = Buffer.from(parsedJWT[1], 'base64').toString();\r\n    let jwtData = JSON.parse(data);\r\n    return _.now() > jwtData['exp'] * 1000;\r\n\r\n  } catch (error) {\r\n    if (token) {\r\n      bmconsole.log('-=[Error en la isJWTExpired]=-')\r\n      bmconsole.log(error);\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction loginAuxiliar(sistema) {\r\n\r\n  // TODO: Pasar a constantes\r\n  let data =\r\n  {\r\n    \"p_usuario\": \"PRODUSU\",\r\n    \"p_enc_pwd\": \"PRODUSU\"\r\n  };\r\n\r\n  let uri = `rws/${sistema}/login`;\r\n\r\n  sistema = _.startCase(sistema);\r\n\r\n  return this.getRESTData({\r\n    uri: uri,\r\n    data: data,\r\n    token: user.get('JWToken'),\r\n    ok: ((resp) => {\r\n      bmconsole.log(`Login ${sistema} OK` )\r\n      user.set(`IdSession${sistema}`, resp.payload.p_o_sesion);\r\n      user.set(`JWToken${sistema}`, resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.error(`Login ${sistema} ${error}` )\r\n      user.set(`IdSession${sistema}`, null);\r\n      user.set(`JWToken${sistema}`, null);\r\n    }),\r\n  });\r\n}\r\n\r\nfunction loginListas() {\r\n  // TODO: chequear errores\r\n  if (this.isInvalidJWT(user.get('JWTokenListas')))\r\n    return this.loginAuxiliar('listas');\r\n}\r\n\r\nfunction loginListados() {\r\n  // TODO: chequear errores\r\n  if (this.isInvalidJWT(user.get('JWTokenListados')))\r\n    return this.loginAuxiliar('listados');\r\n}\r\n\r\nfunction loginPoliza() {\r\n  // TODO: chequear errores\r\n  if (this.isInvalidJWT(user.get('JWTokenPoliza')))\r\n    return this.loginAuxiliar('poliza');\r\n}\r\n\r\n","unPublishedCode":"function getBaseURL() {\r\n\r\n  //return 'https://nthnet.laholando.com/';\r\n  return 'https://hnet.laholando.com/';\r\n}\r\n\r\nfunction checkRESTError(resp) {\r\n\r\n  try {\r\n    if (_.has(resp,'payload')  && _.has(resp.payload,'p_error'))\r\n        return resp.payload.p_error;\r\n    if (_.has(resp,'p_error') && resp.p_error != 0)\r\n      return resp.p_error;\r\n\r\n  } catch (error) {\r\n    bmconsole.log(error);\r\n  }\r\n  return null;\r\n\r\n}\r\n\r\nfunction getRESTData(cfg) {\r\n  let url = this.getBaseURL() + cfg.uri;\r\n\r\n  var headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n\r\n  if (cfg.token) {\r\n    headers['X-authorization'] = 'Bearer ' + cfg.token;\r\n  }\r\n\r\n  return rp({\r\n    uri: url,\r\n    method: 'POST',\r\n    body: cfg.data,\r\n    json: true,\r\n    headers: headers\r\n  })\r\n    .then((resp) => {\r\n      let error = this.checkRESTError(resp);\r\n      if (error)\r\n        throw new Error(error);\r\n      if (cfg.ok)\r\n        cfg.ok(resp);\r\n    })\r\n    .catch((error) => {\r\n      result.text(`[ERROR] : ${error.message}`);\r\n\r\n      user.set('error', error);\r\n      if (cfg.error)\r\n        cfg.error(error);\r\n    })\r\n    .finally(() => {      \r\n      result.done();\r\n    });\r\n}\r\n\r\nfunction isInvalidJWT(token) {\r\n  try {\r\n    let parsedJWT = _.split(token, '.');\r\n    // En el 2do está la expiración\r\n    let data = Buffer.from(parsedJWT[1], 'base64').toString();\r\n    let jwtData = JSON.parse(data);\r\n    return _.now() > jwtData['exp'] * 1000;\r\n\r\n  } catch (error) {\r\n    if (token) {\r\n      bmconsole.log('-=[Error en la isJWTExpired]=-')\r\n      bmconsole.log(error);\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction loginAuxiliar(sistema) {\r\n\r\n  // TODO: Pasar a constantes\r\n  let data =\r\n  {\r\n    \"p_usuario\": \"PRODUSU\",\r\n    \"p_enc_pwd\": \"PRODUSU\"\r\n  };\r\n\r\n  let uri = `rws/${sistema}/login`;\r\n\r\n  sistema = _.startCase(sistema);\r\n\r\n  return this.getRESTData({\r\n    uri: uri,\r\n    data: data,\r\n    token: user.get('JWToken'),\r\n    ok: ((resp) => {\r\n      bmconsole.log(`Login ${sistema} OK` )\r\n      user.set(`IdSession${sistema}`, resp.payload.p_o_sesion);\r\n      user.set(`JWToken${sistema}`, resp.token);\r\n    }),\r\n    error: ((error) => {\r\n      bmconsole.error(`Login ${sistema} ${error}` )\r\n      user.set(`IdSession${sistema}`, null);\r\n      user.set(`JWToken${sistema}`, null);\r\n    }),\r\n  });\r\n}\r\n\r\nfunction loginListas() {\r\n  // TODO: chequear errores\r\n  //if (this.isInvalidJWT(user.get('JWTokenListas')))\r\n    return this.loginAuxiliar('listas');\r\n}\r\n\r\nfunction loginListados() {\r\n  // TODO: chequear errores\r\n  //if (this.isInvalidJWT(user.get('JWTokenListados')))\r\n    return this.loginAuxiliar('listados');\r\n}\r\n\r\nfunction loginPoliza() {\r\n  // TODO: chequear errores\r\n  //if (this.isInvalidJWT(user.get('JWTokenPoliza')))\r\n    return this.loginAuxiliar('poliza');\r\n}\r\n\r\n","name":"utils","type":"USER","id":"JLEJ1NR21T6JN2SWOPPI","filename":"utils.js"},{"publishedCode":"const DOCUMENTO_POLIZA_URL = 'rws/poliza/OBTENER_DOCUMENTO';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_cod_documento\": \"CREDENCIAL\",\r\n    \"p_cod_sec\": 0,\r\n    \"p_poliza\": 0,\r\n    \"p_endoso\": 0\r\n  };\r\n\r\n  let Poliza = JSON.parse(user.get('Poliza'));\r\n  data.p_cod_sec = Poliza.cod_sec;\r\n  data.p_poliza = Poliza.poliza;\r\n\r\n  return await utils.getRESTData({\r\n    uri: DOCUMENTO_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenPoliza'),\r\n    ok: ((resp) => {\r\n      result.file(`data:application/pdf;base64,${resp.p_documento}`,'📄 Te comparto *la copia de tu póliza*:');\r\n      debugger;\r\n      //user.set('copiaPoliza', resp.p_documento);\r\n      ;\r\n    }),\r\n    error: ((error) => {\r\n      user.set('copiaPoliza', null);\r\n      result.text( `Hubo un error al traer el documento de la póliza: ${error}`)\r\n      ;\r\n    }),\r\n  });\r\n\r\n\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n\r\n  .catch(err => {\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":"const DOCUMENTO_POLIZA_URL = 'rws/poliza/OBTENER_DOCUMENTO';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n  let data =\r\n  {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_cod_documento\": \"CREDENCIAL\",\r\n    \"p_cod_sec\": 0,\r\n    \"p_poliza\": 0,\r\n    \"p_endoso\": 0\r\n  };\r\n\r\n  let Poliza = JSON.parse(\"{\\\"dominio\\\":\\\"AB130KH\\\",\\\"nro_rie\\\":1,\\\"poliza\\\":13056706,\\\"cod_sec\\\":3,\\\"desc_sec\\\":\\\"Automotores\\\",\\\"poliza_sec\\\":\\\"13056706 Automotores\\\",\\\"icono_seccion\\\":\\\"https://hnet.laholando.com/img/seccion03.png\\\"}\");\r\n  //,user.get('Poliza'));\r\n  data.p_cod_sec = Poliza.cod_sec;\r\n  data.p_poliza = Poliza.poliza;\r\n\r\n  return await utils.getRESTData({\r\n    uri: DOCUMENTO_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenPoliza'),\r\n    ok: ((resp) => {\r\n      result.file(`data:application/pdf;base64,${resp.p_documento}`,'📄 Te comparto *la copia de tu póliza*:');\r\n      //debugger;\r\n      //user.set('copiaPoliza', resp.p_documento);\r\n      ;\r\n    }),\r\n    error: ((error) => {\r\n      user.set('copiaPoliza', null);\r\n      result.text( `Hubo un error al traer el documento de la póliza: ${error}`)\r\n      ;\r\n    }),\r\n  });\r\n\r\n\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n\r\n  .catch(err => {\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n    result.text(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","name":"poliza_obtener_documento","type":"USER","id":"JK3G2Q66BXEVYMUJVS0X","filename":"poliza_obtener_documento.js"},{"publishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  await utils.loginListas();\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_limite\": 1000,\r\n    \"p_nropag\": 0,\r\n    \"p_cod_prod\": user.get('CodProductor'),\r\n    \"p_filtro\": '',//searchType == SearchType.ASEGURADOS ? query : '',\r\n    \"p_poliza\": '',//searchType == SearchType.POLIZAS ? query : '',\r\n    \"p_dominio\": 'AB130KH'\r\n  };\r\n\r\n  /*if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\r\n    data.p_dominio = context.params.p_dominio;*/\r\n\r\n  return await utils.getRESTData({\r\n    uri: OBTENER_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n    ok: ((resp) => {\r\n      user.set('Poliza', JSON.stringify(resp.p_list_dominios_polizas[0]));\r\n    }),\r\n    error: ((error) => {\r\n      user.set('Poliza', null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","unPublishedCode":"const OBTENER_POLIZA_URL = 'rws/listas/LIST_DOMINIOS_POLIZAS';\r\n\r\nlet utils = require('utils');\r\n\r\nconst main = async () => {\r\n\r\n  let data = {\r\n    \"p_o_sesion\": user.get('IdSession'),\r\n    \"p_limite\": 1000,\r\n    \"p_nropag\": 0,\r\n    \"p_cod_prod\": 72832,//user.get('CodProductor'),\r\n    \"p_filtro\": '',//searchType == SearchType.ASEGURADOS ? query : '',\r\n    \"p_poliza\": '',//searchType == SearchType.POLIZAS ? query : '',\r\n    \"p_dominio\": 'AB130KH'\r\n  };\r\n\r\n  if (context.params.p_dominio != null && (context.params.p_dominio ?? '') != '')\r\n    data.p_dominio = context.params.p_dominio;\r\n\r\n  return await utils.getRESTData({\r\n    uri: OBTENER_POLIZA_URL,\r\n    data: data,\r\n    token: user.get('JWTokenListas'),\r\n    ok: ((resp) => {\r\n      user.set('Poliza', JSON.stringify(resp.p_list_dominios_polizas[0]));\r\n    }),\r\n    error: ((error) => {\r\n      user.set('Poliza', null);\r\n    }),\r\n  });\r\n};\r\n\r\nmain()\r\n  .then((x) => {\r\n    ;\r\n  })\r\n  .catch(err => {\r\n    // Code on error\r\n    bmconsole.error(`[ERROR]: ${err.message}`);\r\n  })\r\n  .finally(() => {\r\n    // Code on finish\r\n    result.done();\r\n  });\r\n","name":"obtener_poliza","type":"USER","id":"JK62A2MOR44M0A85I1MF","filename":"obtener_poliza.js"},{"publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"let utils = require('utils');\n\nconst main = async () => {\n  user.set('error', null);\n\n  return await utils.loginPoliza();\n};\n\nmain()\n  .then((x) => {\n    bmconsole.log(`Login Poliza OK`);\n  })\n  .catch(err => {\n    result.text(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    result.done();\n  });","name":"login_poliza","type":"USER","id":"BCKRB5YCB4ORP766WDCJ","filename":"login_poliza.js"}]}