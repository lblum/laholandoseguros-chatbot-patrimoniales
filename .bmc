{"token":"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiaG9sYW5kb3NlZ3Vyb3MiLCJuYW1lIjoiTGlsaWFuYSBTaWx2YSIsImFwaSI6dHJ1ZSwiaWQiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIiwiZXhwIjoxODcxNTc4Nzg1LCJqdGkiOiJCc1AxcVZBdjZTVGVpM2VvSk9VdWRYN3IyRzAyIn0.BCNWvf9uqejdRxjBI9-AlqLDUYGIXBGDx8kutmFsDLKHfayox1V2B3noK02j0OSCK3cij1_51e35MNU8kJSisA","cas":[{"id":"YRIGN55L0RYS06MWR435","name":"login","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const LOGIN_URL = 'rws/holandonet/login';\r\n\r\nlet utils = require('utils');\r\n\r\nlet data =\r\n{\r\n  \"p_usuario\": \"prodlhbas\",\r\n  \"p_enc_pwd\": \"prodlhbas\"\r\n};\r\n\r\nif (context.params.user != null && context.params.user != undefined)\r\n  data.p_usuario = context.params.user;\r\nif (context.params.password != null && context.params.password != undefined)\r\n  data.p_enc_pwd = context.params.password;\r\n\r\nutils.getRESTData({\r\n  uri: LOGIN_URL,\r\n  data: data,\r\n  ok: ((resp) => {\r\n    user.set('IdSession', resp.payload.p_o_sesion);\r\n    user.set('JWToken', resp.token);\r\n  }),\r\n  error: ((error) => {\r\n    user.set('IdSession', null);\r\n    user.set('JWToken', null);\r\n  }),\r\n});\r\n","filename":"login.js"},{"id":"KTZ1UKIW20KKCSUL6AWC","name":"login_general","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"login_general.js"},{"id":"JV7J4MTHOMJF7OWM7JLY","name":"login_listas","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"login_listas.js"},{"id":"10HXUTGXJ30JFIS4HGWL","name":"list_datos_user","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"const DATOS_URL = 'rws/listas/LIST_DATOS_USER';\n\nlet utils = require('utils');\n\nlet data =\n{\n  \"p_o_sesion\": user.get('IdSession'),\n};\n\nutils.loginListas();\n\nutils.getRESTData({\n  uri: DATOS_URL,\n  data: data,\n  token: user.get('JWTokenListas'),\n\n  ok: ((resp) => {\n    let usr = resp.p_list_user[0];\n    user.set('CodProductor', usr.cod_prod);\n    user.set('nombre', usr.nombre_user);\n  }),\n  error: ((error) => {\n    user.set('CodProductor', null);\n  }),\n});\n","filename":"list_datos_user.js"},{"id":"XUDXHL5UA3SRKHOFQSIU","name":"list_medios_pago","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_medios_pago.js"},{"id":"WKBIUXYCX5IOUS8DJVGL","name":"list_poliza_cartera","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_poliza_cartera.js"},{"id":"AAEY3YF56UF0E7LZO83W","name":"datos_contacto","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"datos_contacto.js"},{"id":"ZFMAX76R5RN0ESNO05XT","name":"login_listados","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"login_listados.js"},{"id":"JLEJ1NR21T6JN2SWOPPI","name":"utils","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":"function getBaseURL() {\n  //return 'https://nthnet.laholando.com/';\n  return 'https://dhnet.laholando.com/';\n}\n\nfunction checkRESTError(resp) {\n\n  try {\n    if (resp.hasOwn('payload') && resp.payload.hasOwn('p_error'))\n      return resp.payload.p_error;\n    if (resp.payload.hasOwn('p_error'))\n      return resp.payload.p_error;\n\n  } catch (error) {\n  }\n  return null;\n\n}\n\nfunction getRESTData(cfg) {\n  let url = utils.getBaseURL() + cfg.uri;\n\n  var headers = {\n    'Content-Type': 'application/json'\n  };\n\n\n  if (cfg.token) {\n    headers['X-authorization'] = 'Bearer ' + cfg.token;\n  }\n\n  rp({\n    uri: url,\n    method: 'POST',\n    body: cfg.data,\n    json: true,\n    headers: headers\n  })\n    .then((resp) => {\n      let error = utils.checkRESTError(resp);\n      if (error)\n        throw new Error(error);\n      if (cfg.ok)\n        cfg.ok(resp);\n    })\n    .catch((error) => {\n      user.set('error', error);\n      if (cfg.error)\n        cfg.error(error);\n    })\n    .finally(() => {\n      result.done();\n    });\n\n}\n\nfunction isInvalidJWT(token) {\n  try {\n    let parsedJWT = _.split(token, '.');\n    // En el 2do está la expiración\n    let data = Buffer.from(parsedJWT[1], 'base64').toString();\n    let jwtData = JSON.parse(data);\n    return _.now() > jwtData['exp'] * 1000;\n\n  } catch (error) {\n    bmconsole.log('-=[Error en la isJWTExpired]=-')\n    bmconsole.log(error);\n  }\n  return true;\n}\n\nfunction loginAuxiliar(sistema) {\n\n\n  // TODO: Pasar a constantes\n  let data =\n  {\n    \"p_usuario\": \"PRODUSU\",\n    \"p_enc_pwd\": \"PRODUSU\"\n  };\n\n  let uri = `rws/${sistema}/login`;\n\n  sistema = _.startCase(sistema);\n\n  utils.getRESTData({\n    uri: uri,\n    data: data,\n    token: user.get('JWToken'),\n    ok: ((resp) => {\n      user.set(`IdSession${sistema}`, resp.payload.p_o_sesion);\n      user.set(`JWToken${sistema}`, resp.token);\n    }),\n    error: ((error) => {\n      user.set(`IdSession${sistema}`, null);\n      user.set(`JWToken${sistema}`, null);\n    }),\n  });\n}\n\nfunction loginListas() {\n  // TODO: chequear errores\n  if (utils.isInvalidJWT(user.get('JWTokenListas')))\n    utils.loginAuxiliar('listas');\n}\n\nfunction loginListados() {\n  // TODO: chequear errores\n  if (utils.isInvalidJWT(user.get('JWTokenListados')))\n    utils.loginAuxiliar('listados');\n}\n","filename":"utils.js"}]}